// METHOD 1: Ray-MMD
// OTHER: https://aras-p.info/texts/CompactNormalStorage.html#method04spheremap

#define NORMAL_ENCODE_METHOD 1
#if NORMAL_ENCODE_METHOD == 1
// Works well even RGB888 setting
// Has error near Z axis
vec3 EncodeNormal(vec3 normal)
{
	float p = sqrt(-normal.z * 8 + 8);
	vec2 enc = normal.xy / p + 0.5f;
	vec2 enc255 = enc * 255;
	vec2 residual = floor(fract(enc255) * 16);
	return vec3(floor(enc255), residual.x * 16 + residual.y) / 255;
}

vec3 DecodeNormal(vec3 enc)
{
	float nz = floor(enc.z * 255) / 16;
	enc.xy += vec2(floor(nz) / 16, fract(nz)) / 255;
	vec2 fenc = enc.xy * 4 - 2;
	float f = dot(fenc, fenc);
	float g = sqrt(1 - f / 4);
	vec3 normal;
	normal.xy = fenc * g;
	normal.z = f / 2 - 1;
	return normalize(normal);
}
#elif NORMAL_ENCODE_METHOD == 2
// Poor on 888 setting
// Require more than 101010 or etc.
vec3 EncodeNormal(vec3 normal)
{
    return 0.5 + 0.5*normal;
}

vec3 DecodeNormal(vec3 enc)
{
    return enc * 2 - 1;
}
#elif NORMAL_ENCODE_METHOD == 3
// Work well 1010 or more 
vec3 EncodeNormal(vec3 normal)
{
    return vec3(normal.xy*0.5 + 0.5, 0.0);
}

vec3 DecodeNormal(vec3 enc)
{
    vec3 n;
    n.xy = enc.xy*2 - 1;
    n.z = sqrt(1 - dot(n.xy, n.xy));
    return n;
}
#elif NORMAL_ENCODE_METHOD == 4
// Work well 1010 or more 
vec3 EncodeNormal(vec3 normal)
{
    float p = sqrt(normal.z*8 + 8);
    return vec3(normal.xy/p + 0.5, 0.0);
}

vec3 DecodeNormal(vec3 enc)
{
    vec2 fenc = enc.xy*4 - 2;
    float f = dot(fenc, fenc);
    float g = sqrt(1 - f/4);
    return vec3(fenc*g, 1 - f/2);
}
#elif NORMAL_ENCODE_METHOD == 5
// Work well 1010, but pre one is better
vec3 EncodeNormal(vec3 normal)
{
    float scale = 1.7777;
    vec2 enc = normal.xy / (normal.z+1);
    enc /= scale;
    enc = enc*0.5 + 0.5;
    return vec3(enc, 0.0);
}

vec3 DecodeNormal(vec3 enc)
{
    float scale = 1.7777;
    vec3 nn = enc.xyz * vec3(2*scale, 2*scale, 0) + vec3(-scale, -scale, 1);
    float g = 2.0 / dot(nn.xyz, nn.xyz);
    return vec3(g*nn.xy, g-1);
}

#endif
