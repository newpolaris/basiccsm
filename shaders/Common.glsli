
float saturate(float x)
{
    return clamp(x, 0.0, 1.0);
}

vec3 saturate(vec3 v)
{
    return clamp(v, 0.0, 1.0);
}

bool any(float x)
{
    return x != 0.0;
}

void clip(float b)
{
#if !VERTEX_SHADER
    if (b < 0.0)
        discard;
#endif
}

vec3 mul(mat3 m, vec3 v)
{
    return m * v;
}

mat3 mul(mat3 m1, mat3 m2)
{
    return m1 * m2;
}

mat3 transpose(mat3 v)
{
    mat3 tmp;
    tmp[0] = vec3(v[0].x, v[1].x, v[2].x);
    tmp[1] = vec3(v[0].y, v[1].y, v[2].y);
    tmp[2] = vec3(v[0].z, v[1].z, v[2].z);

    return tmp;
}

float lerp(float a, float b, float x) { return mix(a, b, x); }
vec3 lerp(vec3 a, vec3 b, float x) { return mix(a, b, vec3(x)); }
vec3 lerp(vec3 a, vec3 b, vec3 x) { return mix(a, b, x); }
vec4 lerp(vec4 a, vec4 b, float x) { return mix(a, b, vec4(x)); }
vec4 lerp(vec4 a, vec4 b, vec4 x) { return mix(a, b, x); }

float frac(float x) { return fract(x); }
vec2 frac(vec2 x) { return fract(x); }
vec3 frac(vec3 x) { return fract(x); }