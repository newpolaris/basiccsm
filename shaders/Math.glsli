#define InvLog2 3.32192809489f

#define InvPIE 0.318309886142f
#define InvPIE8 0.039788735767f
#define InvPIE4 0.079577471535f

#define PI 3.1415926535f
#define PI_2 (3.1415926535f * 2.0)

#define ALN2I 1.442695022

#define EPSILON 1e-5f

float pow2(float x) { return x*x; }
vec2  pow2(vec2 x) { return x*x; } 
vec3  pow2(vec3 x) { return x*x; }
vec4  pow2(vec4 x) { return x*x; }

float pow5(float x)  { float  xx = x * x; return xx * xx * x; }
vec2  pow5(vec2 x) { vec2 xx = x * x; return xx * xx * x; }
vec3  pow5(vec3 x) { vec3 xx = x * x; return xx * xx * x; }
vec4  pow5(vec4 x) { vec4 xx = x * x; return xx * xx * x; }

float sum(vec2 v) { return dot(v, vec2(1.0)); }
float sum(vec3 v) { return dot(v, vec3(1.0)); }
float sum(vec4 v) { return dot(v, vec4(1.0)); }

float madd(float v, float t1 , float t2 ) { return v * t1 + t2; }
vec2  madd(vec2 v, vec2 t1, vec2 t2) { return v * t1 + t2; }
vec3  madd(vec3 v, vec3 t1, vec3 t2) { return v * t1 + t2; }
vec4  madd(vec4 v, vec4 t1, vec4 t2) { return v * t1 + t2; }

float length2(vec2 v) { return dot(v, v); }
float length2(vec3 v) { return dot(v, v); }
float length2(vec4 v) { return dot(v, v); }

float min2(vec2 v) { return min(v.x, v.y); }
float max3(vec3 v) { return max(v.x, max(v.y, v.z)); }

float luminance(vec3 rgb)
{
    return dot(rgb, vec3(0.299, 0.587, 0.114));
}

float srgb2linear(float x)
{
    const float ALPHA = 0.055;
    return x < (0.04045) ? x / 12.92 : pow((max(x, 1e-5) + ALPHA) / (1 + ALPHA), 2.4);
}

vec3 srgb2linear(vec3 rgb)
{
    return vec3(srgb2linear(rgb.r), srgb2linear(rgb.g), srgb2linear(rgb.b));
}

vec4 srgb2linear(vec4 c)
{
    return vec4(srgb2linear(c.rgb), c.a);
}

vec3 srgb2linear_fast(vec3 rgb)
{
    return pow(max(rgb, EPSILON), vec3(2.2));
}

vec4 srgb2linear_fast(vec4 c)
{
    return vec4(srgb2linear_fast(c.rgb), c.a);
}

vec3 linear2srgb(vec3 srgb)
{
    // minimum positive non-denormal (fixes black problem on DX11 AMD and NV)
    srgb = max(vec3(6.10352e-5), srgb); 
    return min(srgb * 12.92, pow(max(srgb, 0.00313067), vec3(1.0/2.4)) * 1.055 - 0.055);
}

vec4 linear2srgb(vec4 c)
{
    return vec4(linear2srgb(c.rgb), c.a);
}

vec3 rgb2hsv(vec3 c)
{
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = lerp(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = lerp(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(frac(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * lerp(K.xxx, saturate(p - K.xxx), c.y);
}

vec2 ComputeRaySphereIntersection(vec3 pos, vec3 dir, vec3 c, float r)
{
    vec3 tc = c - pos;

    float l = dot(tc, dir);
    float d = l*l - dot(tc, tc) + r*r;
    if (d < 0) return vec2(-1.0, -1.0);
    float sl = sqrt(d);
    return vec2(l - sl, l + sl);
}

float ComputeRayPlaneIntersection(vec3 position, vec3 viewdir, vec3 n, float dist)
{
    float a = dot(n, viewdir);
    if (a > 0.0)
    {
        return -1;
    }
    else
    {
        float t = -(dot(position, n) + dist) / a;
        return t;
    }
}

vec4 EncodeRGBT(vec3 rgb, float range = 1024)
{
    float limits = 0;
    limits = max(max(rgb.r, rgb.g), max(rgb.b, 1e-6f));
    limits = min(limits, range);

    vec4 encode;
    encode[3] = (range + 1) / range * limits / (1 + limits);
    encode[3] = ceil(encode[3] * 255.0) / 255.0;

    float rcp = 1.0 / (encode[3] / (1.0 + 1.0 / range - encode[3]));

    encode[0] = rgb.r * rcp;
    encode[1] = rgb.g * rcp;
    encode[2] = rgb.b * rcp;

    return encode;
}

vec3 DecodeRGBT(vec4 rgbt, float range = 1024)
{
    rgbt.a = rgbt.a / (1 + 1 / range - rgbt.a);
    return rgbt.rgb * rgbt.a;
}

// NDC to Texture Coordinate
vec2 PosToCoord(vec2 position)
{
    return position * vec2(0.5, 0.5) + vec2(0.5, 0.5);
}

vec4 PosToCoord(vec4 position)
{
    return position * vec4(0.5, 0.5, -0.5, -0.5) + vec4(0.5, 0.5, 0.5, 0.5);
}

vec2 CoordToPos(vec2 coord)
{
    return coord * vec2(2, 2) + vec2(-1, -1);
}

float SmoothCurve(float x)
{
    return x * x * (3.0 - 2.0 * x);
}

vec3 SmoothCurve(vec3 x)
{
    return x * x * (3.0 - 2.0 * x);
}

float TriangleWave(float x)
{
    return abs(fract(x + 0.5) * 2.0 - 1.0);
}

vec3 TriangleWave(vec3 x)
{
    return abs(fract(x + 0.5) * 2.0 - 1.0);
}

float SmoothTriangleWave(float x)
{
    return SmoothCurve(TriangleWave(x));
}

vec3 SmoothTriangleWave(vec3 x)
{
    return SmoothCurve(TriangleWave(x));
}

mat3 CreateRotate(vec3 euler)
{
    float sj, cj, si, ci, sh, ch;

    si = sin(euler.x), ci = cos(euler.x);
    sj = sin(euler.y), cj = cos(euler.y);
    sh = sin(euler.y), ch = cos(euler.z);

    float cc = ci * ch;
    float cs = ci * sh;
    float sc = si * ch;
    float ss = si * sh;

    float a1 = cj * ch;
    float a2 = sj * sc - cs;
    float a3 = sj * cc + ss;

    float b1 = cj * sh;
    float b2 = sj * ss + cc;
    float b3 = sj * cs - sc;

    float c1 = -sj;
    float c2 = cj * si;
    float c3 = cj * ci;
    
    mat3 rotate;
    rotate[0] = vec3(a1, a2, a3);
    rotate[1] = vec3(b1, b2, b3);
    rotate[2] = vec3(c1, c2, c3);
    
    return rotate;
}

// Image Based Lighting
// 1 : Enable
// 2 : Enable + UV filp
vec2 ComputeSphereCoord(vec3 normal)
{
#if IBL_QUALITY > 1
    normal = clamp(normal, -1.0, 1.0);
    vec2 coord = vec2(1 - (atan(normal.x, normal.z) * InvPIE * 0.5f + 0.5f), acos(normal.y) * InvPIE);
#else
    normal = clamp(normal, -1.0, 1.0);
    vec2 coord = vec2((atan(normal.x, normal.z) * InvPIE * 0.5f + 0.5f), acos(normal.y) * InvPIE);
#endif
    return coord;
}

vec3 ApplyColorBalance(vec3 color, vec3 colorBalanceP, vec3 colorBalanceM, float grayBalance)
{
    vec3 lum = vec3(luminance(color));
    color = lerp(lum, color, 1 - grayBalance);
    color *= vec3(1 + vec3(colorBalanceP) - vec3(colorBalanceM));
    return color;
}

float SmoothnessToRoughness(float smoothness)
{
    return (1.0f - smoothness) * (1.0f - smoothness);
}

float RoughnessToSmoothness(float roughness)
{
    return 1.0f - sqrt(roughness);
}

vec3 ColorBalance(vec3 color, vec4 balance)
{
    vec3 lum = vec3(luminance(color));
    color = lerp(color, lum, balance.a);
    color *= vec3(1 + balance.rgb);
    return color;
}